# Do not edit this file directly!!!
# Instead edit the template file, and use the generator to create it.
# The generator is at https://github.com/kabir/yaml-alias-expander/releases

name: Java CI
'on':
- push
env:
  MAVEN_OPTS: -Xms756M -Xmx1g
  MAVEN_TEST_PARAMS: -Dmaven.test.failure.ignore=true -DfailIfNoTests=false -Dipv6
    -Djboss.test.transformers.eap -Dci-cleanup=true -fae
jobs:
  build:
    name: Build Server
    runs-on: ubuntu-latest
    env:
      MAVEN_BUILD_PARAMS: -DskipTests -Dmaven.test.failure.ignore=true -DfailIfNoTests=false
        -Djboss.test.transformers.eap -Dci-cleanup=true -DlegacyBuild -DlegacyRelease
        -fae
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Maven
      run: |
        mvn -B install ${MAVEN_BUILD_PARAMS}
        # Build everything so it is cached
        mvn -B install -DallTests -rf testsuite -DskipTests
  ts-smoke:
    name: Unit and Smoke Tests
    runs-on: ubuntu-latest
    needs:
    - build
    env:
      ARTIFACT_NAME: ci-artifacts-unit-smoke
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Maven
      run: mvn -B package ${MAVEN_TEST_PARAMS}
    - name: Zip Artifacts
      run: zip -R artifacts.zip 'server.log' 'surefire-reports/*.txt' 'surefire-reports/*.xml'
    - uses: actions/upload-artifact@v1
      with:
        name: ${{env.ARTIFACT_NAME}}
        path: artifacts.zip
  ts-basic:
    name: Testsuite Basic
    runs-on: ubuntu-latest
    needs:
    - build
    env:
      TEST_MODULE_PARAMS: -Dts.basic -pl testsuite/integration/basic/,testsuite/integration/ws/
      ARTIFACT_NAME: ci-artifacts-basic
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Maven
      run: |
        mvn -B install -pl build,dist -DskipTests
        mvn -B install ${MAVEN_TEST_PARAMS} ${TEST_MODULE_PARAMS}
    - name: Zip Artifacts
      run: zip -R artifacts.zip 'server.log' 'surefire-reports/*.txt' 'surefire-reports/*.xml'
    - uses: actions/upload-artifact@v1
      with:
        name: ${{env.ARTIFACT_NAME}}
        path: artifacts.zip
  ts-clustering:
    name: Testsuite Clustering
    runs-on: ubuntu-latest
    needs:
    - build
    env:
      TEST_MODULE_PARAMS: -Dts.clustering -rf testsuite/integration/clustering/
      ARTIFACT_NAME: ci-artifacts-clustering
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Maven
      run: |
        mvn -B install -pl build,dist -DskipTests
        mvn -B install ${MAVEN_TEST_PARAMS} ${TEST_MODULE_PARAMS}
    - name: Zip Artifacts
      run: zip -R artifacts.zip 'server.log' 'surefire-reports/*.txt' 'surefire-reports/*.xml'
    - uses: actions/upload-artifact@v1
      with:
        name: ${{env.ARTIFACT_NAME}}
        path: artifacts.zip
  ts-domain:
    name: Testsuite Domain
    runs-on: ubuntu-latest
    needs:
    - build
    env:
      TEST_MODULE_PARAMS: -Dts.domain -rf testsuite/domain
      ARTIFACT_NAME: ci-artifacts-domain
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Maven
      run: |
        mvn -B install -pl build,dist -DskipTests
        mvn -B install ${MAVEN_TEST_PARAMS} ${TEST_MODULE_PARAMS}
    - name: Zip Artifacts
      run: zip -R artifacts.zip 'server.log' 'surefire-reports/*.txt' 'surefire-reports/*.xml'
    - uses: actions/upload-artifact@v1
      with:
        name: ${{env.ARTIFACT_NAME}}
        path: artifacts.zip
  ts-elytron:
    name: Testsuite Elytron
    runs-on: ubuntu-latest
    needs:
    - build
    env:
      TEST_MODULE_PARAMS: -Dinteg.module -Dts.elytron -rf testsuite/integration/elytron
      ARTIFACT_NAME: ci-artifacts-elytron
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Maven
      run: |
        mvn -B install -pl build,dist -DskipTests
        mvn -B install ${MAVEN_TEST_PARAMS} ${TEST_MODULE_PARAMS}
    - name: Zip Artifacts
      run: zip -R artifacts.zip 'server.log' 'surefire-reports/*.txt' 'surefire-reports/*.xml'
    - uses: actions/upload-artifact@v1
      with:
        name: ${{env.ARTIFACT_NAME}}
        path: artifacts.zip
  ts-iiop:
    name: Testsuite IIOP
    runs-on: ubuntu-latest
    needs:
    - build
    env:
      TEST_MODULE_PARAMS: -Dts.iiop -rf testsuite/integration/iiop
      ARTIFACT_NAME: ci-artifacts-iiop
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Maven
      run: |
        mvn -B install -pl build,dist -DskipTests
        mvn -B install ${MAVEN_TEST_PARAMS} ${TEST_MODULE_PARAMS}
    - name: Zip Artifacts
      run: zip -R artifacts.zip 'server.log' 'surefire-reports/*.txt' 'surefire-reports/*.xml'
    - uses: actions/upload-artifact@v1
      with:
        name: ${{env.ARTIFACT_NAME}}
        path: artifacts.zip
  ts-legacy:
    name: Testsuite Legacy
    runs-on: ubuntu-latest
    needs:
    - build
    env:
      TEST_MODULE_PARAMS: -Dts.legacy -rf testsuite/integration/legacy
      ARTIFACT_NAME: ci-artifacts-legacy
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Maven
      run: |
        mvn -B install -pl build,dist -DskipTests
        mvn -B install ${MAVEN_TEST_PARAMS} ${TEST_MODULE_PARAMS}
    - name: Zip Artifacts
      run: zip -R artifacts.zip 'server.log' 'surefire-reports/*.txt' 'surefire-reports/*.xml'
    - uses: actions/upload-artifact@v1
      with:
        name: ${{env.ARTIFACT_NAME}}
        path: artifacts.zip
  ts-legacy-ejb-client:
    name: Testsuite Legacy EJB Client
    runs-on: ubuntu-latest
    needs:
    - build
    env:
      TEST_MODULE_PARAMS: -Dts.legacy.ejb.client -rf testsuite/integration/legacy-ejb-client
      ARTIFACT_NAME: ci-artifacts-legacy-ejb-client
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Maven
      run: |
        mvn -B install -pl build,dist -DskipTests
        mvn -B install ${MAVEN_TEST_PARAMS} ${TEST_MODULE_PARAMS}
    - name: Zip Artifacts
      run: zip -R artifacts.zip 'server.log' 'surefire-reports/*.txt' 'surefire-reports/*.xml'
    - uses: actions/upload-artifact@v1
      with:
        name: ${{env.ARTIFACT_NAME}}
        path: artifacts.zip
  ts-manualmode:
    name: Testsuite ManualMode
    runs-on: ubuntu-latest
    needs:
    - build
    env:
      TEST_MODULE_PARAMS: -Dts.manualmode -rf testsuite/integration/manualmode/
      ARTIFACT_NAME: ci-artifacts-manualmode
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Maven
      run: |
        mvn -B install -pl build,dist -DskipTests
        mvn -B install ${MAVEN_TEST_PARAMS} ${TEST_MODULE_PARAMS}
    - name: Zip Artifacts
      run: zip -R artifacts.zip 'server.log' 'surefire-reports/*.txt' 'surefire-reports/*.xml'
    - uses: actions/upload-artifact@v1
      with:
        name: ${{env.ARTIFACT_NAME}}
        path: artifacts.zip
  ts-microprofile:
    name: Testsuite Microprofile
    runs-on: ubuntu-latest
    needs:
    - build
    env:
      TEST_MODULE_PARAMS: -Dinteg.module -Dts.microprofile -rf testsuite/integration/microprofile
      ARTIFACT_NAME: ci-artifacts-microprofile
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Maven
      run: |
        mvn -B install -pl build,dist -DskipTests
        mvn -B install ${MAVEN_TEST_PARAMS} ${TEST_MODULE_PARAMS}
    - name: Zip Artifacts
      run: zip -R artifacts.zip 'server.log' 'surefire-reports/*.txt' 'surefire-reports/*.xml'
    - uses: actions/upload-artifact@v1
      with:
        name: ${{env.ARTIFACT_NAME}}
        path: artifacts.zip
  ts-multimode:
    name: Testsuite MultiNode
    runs-on: ubuntu-latest
    needs:
    - build
    env:
      TEST_MODULE_PARAMS: -Dts.multinode -rf testsuite/integration/multinode
      ARTIFACT_NAME: ci-artifacts-multinode
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Maven
      run: |
        mvn -B install -pl build,dist -DskipTests
        mvn -B install ${MAVEN_TEST_PARAMS} ${TEST_MODULE_PARAMS}
    - name: Zip Artifacts
      run: zip -R artifacts.zip 'server.log' 'surefire-reports/*.txt' 'surefire-reports/*.xml'
    - uses: actions/upload-artifact@v1
      with:
        name: ${{env.ARTIFACT_NAME}}
        path: artifacts.zip
  ts-rbac:
    name: Testsuite MultiNode
    runs-on: ubuntu-latest
    needs:
    - build
    env:
      TEST_MODULE_PARAMS: -Dts.rbac -rf testsuite/integration/rbac
      ARTIFACT_NAME: ci-artifacts-rbac
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Maven
      run: |
        mvn -B install -pl build,dist -DskipTests
        mvn -B install ${MAVEN_TEST_PARAMS} ${TEST_MODULE_PARAMS}
    - name: Zip Artifacts
      run: zip -R artifacts.zip 'server.log' 'surefire-reports/*.txt' 'surefire-reports/*.xml'
    - uses: actions/upload-artifact@v1
      with:
        name: ${{env.ARTIFACT_NAME}}
        path: artifacts.zip
  ts-rts:
    name: Testsuite RTS
    runs-on: ubuntu-latest
    needs:
    - build
    env:
      TEST_MODULE_PARAMS: -Dts.rts -rf testsuite/integration/rts
      ARTIFACT_NAME: ci-artifacts-rts
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Maven
      run: |
        mvn -B install -pl build,dist -DskipTests
        mvn -B install ${MAVEN_TEST_PARAMS} ${TEST_MODULE_PARAMS}
    - name: Zip Artifacts
      run: zip -R artifacts.zip 'server.log' 'surefire-reports/*.txt' 'surefire-reports/*.xml'
    - uses: actions/upload-artifact@v1
      with:
        name: ${{env.ARTIFACT_NAME}}
        path: artifacts.zip
  ts-secman:
    name: Testsuite SecMan
    runs-on: ubuntu-latest
    needs:
    - build
    env:
      TEST_MODULE_PARAMS: -Dts.secman -rf testsuite/integration/secman
      ARTIFACT_NAME: ci-artifacts-secman
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Maven
      run: |
        mvn -B install -pl build,dist -DskipTests
        mvn -B install ${MAVEN_TEST_PARAMS} ${TEST_MODULE_PARAMS}
    - name: Zip Artifacts
      run: zip -R artifacts.zip 'server.log' 'surefire-reports/*.txt' 'surefire-reports/*.xml'
    - uses: actions/upload-artifact@v1
      with:
        name: ${{env.ARTIFACT_NAME}}
        path: artifacts.zip
  ts-vdx:
    name: Testsuite VDX
    runs-on: ubuntu-latest
    needs:
    - build
    env:
      TEST_MODULE_PARAMS: -Dts.vdx -rf testsuite/integration/vdx
      ARTIFACT_NAME: ci-artifacts-vdx
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Maven
      run: |
        mvn -B install -pl build,dist -DskipTests
        mvn -B install ${MAVEN_TEST_PARAMS} ${TEST_MODULE_PARAMS}
    - name: Zip Artifacts
      run: zip -R artifacts.zip 'server.log' 'surefire-reports/*.txt' 'surefire-reports/*.xml'
    - uses: actions/upload-artifact@v1
      with:
        name: ${{env.ARTIFACT_NAME}}
        path: artifacts.zip
  ts-xts:
    name: Testsuite XTS
    runs-on: ubuntu-latest
    needs:
    - build
    env:
      TEST_MODULE_PARAMS: -Dts.xts -rf testsuite/integration/xts
      ARTIFACT_NAME: ci-artifacts-xts
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Build with Maven
      run: |
        mvn -B install -pl build,dist -DskipTests
        mvn -B install ${MAVEN_TEST_PARAMS} ${TEST_MODULE_PARAMS}
    - name: Zip Artifacts
      run: zip -R artifacts.zip 'server.log' 'surefire-reports/*.txt' 'surefire-reports/*.xml'
    - uses: actions/upload-artifact@v1
      with:
        name: ${{env.ARTIFACT_NAME}}
        path: artifacts.zip
